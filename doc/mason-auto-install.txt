*mason-auto-install.txt*   Automatically install Mason packages on demand

Author: Oscar Wallberg
License: BSD-3
Version: 1.0.0

==============================================================================
CONTENTS                                         *mason-auto-install-contents*

1. Introduction ......................... |mason-auto-install-intro|
2. Setup ................................ |mason-auto-install-setup|
3. Configuration ........................ |mason-auto-install-config|
4. Post-Install Hooks ................... |mason-auto-install-hooks|
5. API Reference ........................ |mason-auto-install-api|
6. Examples ............................. |mason-auto-install-examples|
7. Troubleshooting ...................... |mason-auto-install-troubleshooting|

==============================================================================
1. INTRODUCTION                                     *mason-auto-install-intro*

Automatically install and update Mason packages.

Features: ~
  - On-demand installation: Packages are installed only when buffers of
    relevant filetypes are opened
  - Automatic updates: Keeps packages updated
  - Version pinning: Lock packages to specific versions to avoid undesired
    updates
  - Post-install hooks: Run shell commands or functions after package
    installation
  - LSP integration: Automatically restart any LSP clients after updates

==============================================================================
2. CONFIGURATION                                   *mason-auto-install-config*

Example ~
>lua
    require('mason-auto-install').setup({
        packages = {
            'lua_ls',
            { 'stylua', version = '0.20.0' },
            {
                'typescript-language-server',
                dependencies = { 'prettier' },
                post_install_hooks = {
                    function(pkg)
                        print("Installed " .. pkg.name)
                        return true
                    end,
                    { 'npm', 'install', '-g', '@types/node' }
                }
            }
        }
    })
<

Options ~

                                          *mason-auto-install-config-packages*
packages ~
    Type: `(string|MasonAutoInstall.Package.Config)[]`
    Required: No
    Default: `{}`
    
    List of packages to manage. Each entry can be a string (package name) or
    a table with detailed configuration.

                                            *mason-auto-install-package-config*
Package Configuration ~

    [1] or name ~
        Type: `string`
        Required: Yes
        Mason package name as it appears in the registry.

    version ~
        Type: `string`
        Required: No
        Default: Latest version
        Specific version to install.

    filetypes ~
        Type: `string[]`
        Required: No
        Default: LSP filetypes if available, otherwise triggers on any filetype
        File types that trigger installation.

    dependencies ~
        Type: `(string|MasonAutoInstall.Package.Config)[]`
        Required: No
        Default: `{}`
        Other packages this package depends on.

    post_install_hooks ~
        Type: `(fun(pkg: MasonAutoInstall.Package): boolean?|string[])[]`
        Required: No
        Default: `{}`
        Functions or shell commands to run after installation.

==============================================================================
3. DEPENDENCIES                              *mason-auto-install-dependencies*

Dependencies are treated the same as any package and can be configured in the
same way. The only difference is they will be handled before the packages that
depend on them. It is useful for grouping related packages together, and even
works on multiple levels:
>lua
    {
        'typescript-language-server',
        dependencies = {
            'prettier',
            'eslint_d',
            {
                'tailwindcss-language-server',
                version = "0.14.20",
                dependencies = {
                    'css-lsp',
                    'html-lsp'
                }
            }
        }
    }
<

==============================================================================
4. POST-INSTALL HOOKS                               *mason-auto-install-hooks*

Post-install hooks can be either shell commands or functions:

Shell Commands: ~
    Shell commands are specified as arrays of strings (command + arguments).
    They run in the package's installation directory.
    
    Example:
>lua
        post_install_hooks = {
            { 'npm', 'install', '-g', 'some-package' },
            { 'pip', 'install', 'additional-tool' }
        }
<
    
    Success/failure is determined by the exit code (0 = success).

Functions: ~
    Functions receive the package instance as a parameter and can perform
    custom setup logic.
    
    Example:
>lua
        post_install_hooks = {
            function(pkg)
                print("Setting up " .. pkg.name)
                -- Your custom logic here
                return true  -- or false to indicate failure
            end
        }
<
    
    Functions should return:
    - `true` to indicate success
    - `false` to indicate failure
    - `nil` (or nothing) defaults to success

Mixed Hooks: ~
    You can mix shell commands and functions in the same package:
>lua
        post_install_hooks = {
            { 'npm', 'install', '-g', '@types/node' },
            function(pkg)
                vim.notify("TypeScript setup complete!")
                return true
            end
        }
<

==============================================================================
5. API REFERENCE                                      *mason-auto-install-api*

setup({opts})                                     *mason-auto-install.setup()*
    Setup the mason-auto-install plugin.
    
    Parameters: ~
        {opts} (`MasonAutoInstall.Config`) See |mason-auto-install-config|.
    
    Usage: ~
>lua
        require('mason-auto-install').setup({
            packages = { 'lua_ls', 'stylua' }
        })
<

==============================================================================
 vim:tw=78:ts=8:et:ft=help:norl:
